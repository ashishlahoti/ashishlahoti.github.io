<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Coding N Concepts</title>
    <link>https://codingnconcepts.com/categories/java/</link>
    <description>Recent content in Java on Coding N Concepts</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 03 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://codingnconcepts.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Calculate Age from Birth Date in Java</title>
      <link>https://codingnconcepts.com/java/age-calculator-java/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/age-calculator-java/</guid>
      <description>&lt;p&gt;In this quick tutorial, we&amp;rsquo;ll learn how to calculate the age in human-readable format in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Date Difference in Human Readable format in Java</title>
      <link>https://codingnconcepts.com/java/date-difference-human-readable/</link>
      <pubDate>Wed, 03 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/date-difference-human-readable/</guid>
      <description>&lt;p&gt;In this quick tutorial, we&amp;rsquo;ll learn how to print the difference between two dates in human-readable format in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sort Map by Key using TreeMap in Java</title>
      <link>https://codingnconcepts.com/java/sort-map-by-key-using-treemap/</link>
      <pubDate>Sat, 27 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/sort-map-by-key-using-treemap/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to use TreeMap to sort a Map by its keys in Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sort Array List of Objects in Java</title>
      <link>https://codingnconcepts.com/java/sort-array-list-of-object-in-java/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/sort-array-list-of-object-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to sort an Array List of Objects in Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>Print Array in Java</title>
      <link>https://codingnconcepts.com/java/print-array-in-java/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/print-array-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to print the elements of a given Array in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Regex to Validate IPv4 Address</title>
      <link>https://codingnconcepts.com/java/regex-validate-ipv4-address/</link>
      <pubDate>Sun, 12 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/regex-validate-ipv4-address/</guid>
      <description>&lt;p&gt;In this article, we&amp;rsquo;ll learn how to validate IPv4 addresses using Java Regex&lt;/p&gt;</description>
    </item>
    <item>
      <title>Assert Optional Value in Java</title>
      <link>https://codingnconcepts.com/java/java-test-assert-optional/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/java-test-assert-optional/</guid>
      <description>&lt;p&gt;In this article, we will learn how to assert Optional in Java using JUnit 5 and AssertJ assertion libraries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Assert Thrown Exception in Java</title>
      <link>https://codingnconcepts.com/java/java-test-assert-thrown-exception/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/java-test-assert-thrown-exception/</guid>
      <description>&lt;p&gt;In this article, we will learn how to assert thrown exceptions in Java using JUnit 5 and AssertJ assertion libraries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Test Object&#39;s multiple properties in Single Assert</title>
      <link>https://codingnconcepts.com/java/java-test-single-assert-multiple-properties/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/java-test-single-assert-multiple-properties/</guid>
      <description>&lt;p&gt;In this article, we will learn how to assert Object&amp;rsquo;s multiple properties in a single assert in JUnit 5, Hamcrest, and AssertJ assertion libraries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Read PDF File in Java</title>
      <link>https://codingnconcepts.com/java/read-pdf-file-java/</link>
      <pubDate>Sat, 25 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/read-pdf-file-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to read a PDF file in Java using different libraries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing Effective Java Tests with Assertion Libraries</title>
      <link>https://codingnconcepts.com/java/java-test-assertion-libraries/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/java-test-assertion-libraries/</guid>
      <description>&lt;p&gt;Java has several assertion libraries that can help you with testing and debugging your code. In this article, we&amp;rsquo;ll look at various assertions libraries and compare them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit Test with JUnit 5 in Java</title>
      <link>https://codingnconcepts.com/java/unit-test-with-junit5-assertions/</link>
      <pubDate>Thu, 22 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/unit-test-with-junit5-assertions/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to write efficient Junit test cases in Java using Junit 5 ( Jupiter ) assertions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit Test with AssertJ in java</title>
      <link>https://codingnconcepts.com/java/unit-test-with-assertj-assertthat/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/unit-test-with-assertj-assertthat/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to write efficient unit test cases in Java using AssertJ &lt;code&gt;assertThat()&lt;/code&gt; assertions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unit Test with Hamcrest in java</title>
      <link>https://codingnconcepts.com/java/unit-test-with-hamcrest-assertthat/</link>
      <pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/unit-test-with-hamcrest-assertthat/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to write efficient Junit test cases in Java using Hamcrest &lt;code&gt;assertThat()&lt;/code&gt; with Matchers.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Format number to 2 decimal places in Java</title>
      <link>https://codingnconcepts.com/java/format-number-to-2-decimal-places/</link>
      <pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/format-number-to-2-decimal-places/</guid>
      <description>&lt;p&gt;Quick example to format any type of number - int, long, float, and double to 2 decimal places in Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>Convert XSD Schema to JSON using JAXB</title>
      <link>https://codingnconcepts.com/java/convert-xsd-to-json-using-jaxb/</link>
      <pubDate>Sun, 28 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/convert-xsd-to-json-using-jaxb/</guid>
      <description>&lt;p&gt;In this tutorial, we will learn how to auto generate class files from XSD schema using JAXB task and use them to convert to Json.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Async Fetch Data from N Sources and Combine In Java</title>
      <link>https://codingnconcepts.com/java/fetch-data-from-sources-async/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/fetch-data-from-sources-async/</guid>
      <description>&lt;p&gt;Fetch Data from multiple sources asynchronously using Java executor fixed thread pool and combine them in Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zip and Unzip Files in Java</title>
      <link>https://codingnconcepts.com/java/zip-unzip-files-in-java/</link>
      <pubDate>Wed, 20 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/zip-unzip-files-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to zip a file or directory into an archive and how to unzip the archive into a directory using Java core libraries.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Convert Long to String in Java</title>
      <link>https://codingnconcepts.com/java/convert-long-to-string-in-java/</link>
      <pubDate>Fri, 15 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/convert-long-to-string-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn different methods to convert &lt;strong&gt;long&lt;/strong&gt; primitive or &lt;strong&gt;Long&lt;/strong&gt; object to String in Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>Using Streams API with Map in Java 8</title>
      <link>https://codingnconcepts.com/java/streams-with-map-java-8/</link>
      <pubDate>Tue, 14 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/streams-with-map-java-8/</guid>
      <description>&lt;p&gt;Java 8 streams API is a widely used feature to write code in a functional programming way. In this tutorial, we&amp;rsquo;ll discuss how to use Streams API for Map creation, iteration and sorting.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Initialize Map with Values in Java</title>
      <link>https://codingnconcepts.com/java/initialize-map-with-values-in-java/</link>
      <pubDate>Fri, 23 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/initialize-map-with-values-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn different ways to initialize a Map with values in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>All About Annotations in Java</title>
      <link>https://codingnconcepts.com/java/annotations-in-java/</link>
      <pubDate>Sat, 26 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/annotations-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn basics of Java Annotations, Built-in Java Annotations, How to create single-value, multi-value, repeated and type annotations and How to use them at runtime.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to generate Random Numbers in Java</title>
      <link>https://codingnconcepts.com/java/generate-random-numbers-in-java/</link>
      <pubDate>Wed, 25 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/generate-random-numbers-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to generate a random number, generate a random array or list, get a random element from an array or list, and shuffle the list elements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Design your own Hash Map in Java</title>
      <link>https://codingnconcepts.com/java/design-hash-map-in-java/</link>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/design-hash-map-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to design our own HashMap data structure in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Multithreading (Concurrency) Interview Questions</title>
      <link>https://codingnconcepts.com/java-multithreading-interview-questions/</link>
      <pubDate>Tue, 29 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java-multithreading-interview-questions/</guid>
      <description>&lt;p&gt;Comprehensive List of Java Multithreading (Concurrency) Interview Questions based on my personal interview experience over the last few years. Keep following this post link for regular updates.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ping Pong using Threads in Java</title>
      <link>https://codingnconcepts.com/java/ping-pong-using-threads-in-java/</link>
      <pubDate>Sun, 27 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/ping-pong-using-threads-in-java/</guid>
      <description>&lt;p&gt;This problem is frequently asked in the interview to check your understanding on threads and your programming skills. Problem statement might change for e.g.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Print ping pong using two threads.&lt;/li&gt;
&lt;li&gt;Print alternate number using two threads.&lt;/li&gt;
&lt;li&gt;Print even numbers by one thread and odd numbers by another thread.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Initialize List with Values in Java</title>
      <link>https://codingnconcepts.com/java/initialize-list-with-values-in-java/</link>
      <pubDate>Sat, 19 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/initialize-list-with-values-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn different ways to initialize List, ArrayList and LinkedList with values in single line in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Convert Roman to Integer in Java</title>
      <link>https://codingnconcepts.com/java/roman-to-integer/</link>
      <pubDate>Fri, 18 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/roman-to-integer/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Given a Roman numeral, convert it to an Integer.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Convert Integer to Roman in Java</title>
      <link>https://codingnconcepts.com/java/integer-to-roman/</link>
      <pubDate>Tue, 15 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/integer-to-roman/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Problem:&lt;/strong&gt; Given an Integer input, convert it to a Roman numeral. Input is within the range from 1 to 3999.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transform JSON-LD in Java</title>
      <link>https://codingnconcepts.com/java/transform-json-ld-in-java/</link>
      <pubDate>Sun, 16 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/transform-json-ld-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn how to transform a Java Object to JSON-LD and vice versa. Also learn how to verify the schema of JSON-LD.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Builder Design Pattern In Java</title>
      <link>https://codingnconcepts.com/java/builder-design-pattern-java/</link>
      <pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/builder-design-pattern-java/</guid>
      <description>&lt;p&gt;&lt;em&gt;Builder Design Pattern&lt;/em&gt; is one of the commonly used design patterns. It falls under the category of &lt;em&gt;Creational Design Patterns&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java-8 Interview Questions</title>
      <link>https://codingnconcepts.com/top-java-8-interview-questions/</link>
      <pubDate>Wed, 17 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/top-java-8-interview-questions/</guid>
      <description>&lt;p&gt;These Java 8 interview questions are based on my personal interview experience. Keep following this post for regular updates.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Factory Design Pattern In Java</title>
      <link>https://codingnconcepts.com/java/factory-design-pattern-java/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/factory-design-pattern-java/</guid>
      <description>&lt;p&gt;&lt;em&gt;Factory Design Pattern&lt;/em&gt; is one of the most commonly used design patterns. It falls under the category of &lt;em&gt;Creational Design Patterns&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Compare two Strings in Java</title>
      <link>https://codingnconcepts.com/java/compare-two-strings-in-java/</link>
      <pubDate>Thu, 04 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/compare-two-strings-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn different ways to compare two strings in Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Iterate over a List in Java</title>
      <link>https://codingnconcepts.com/java/iterate-list-in-java/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/iterate-list-in-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn different ways to iterate over a list in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find Middle Element of Linked List in Java</title>
      <link>https://codingnconcepts.com/java/middle-element-of-linked-list-java/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/middle-element-of-linked-list-java/</guid>
      <description>&lt;p&gt;In this article, we&amp;rsquo;ll learn how to find middle element of a linked list using multiple approach in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Math.pow() method Usage</title>
      <link>https://codingnconcepts.com/java/math-pow-in-java/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/math-pow-in-java/</guid>
      <description>&lt;p&gt;In this quick article, We&amp;rsquo;ll see usage of Java &lt;em&gt;Math.pow()&lt;/em&gt; method which takes two arguments, a and b, and &lt;em&gt;returns a to the power of b i.e. a&lt;sup&gt;b&lt;/sup&gt;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Regex to Validate Phone Number</title>
      <link>https://codingnconcepts.com/java/java-regex-to-validate-phone-number/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/java-regex-to-validate-phone-number/</guid>
      <description>&lt;p&gt;In this article, we&amp;rsquo;ll learn how to validate mobile phone number of different country&amp;rsquo;s format using Java Regex (Regular Expressions)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java String.format() method Usage</title>
      <link>https://codingnconcepts.com/java/string-format-in-java/</link>
      <pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/string-format-in-java/</guid>
      <description>&lt;p&gt;This article demonstrate use of &lt;code&gt;String.format()&lt;/code&gt; in Java with many examples&amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Double Colon (::) Operator in Java 8</title>
      <link>https://codingnconcepts.com/java/double-colon-operator-in-java-8/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/double-colon-operator-in-java-8/</guid>
      <description>&lt;p&gt;The double colon &lt;code&gt;::&lt;/code&gt; operator is introduced in Java 8 for method reference. It is a shorthand syntax for lambda expression that executes one method. You can write more compact and readable code using double colon operator as compare to anonymous classes and lambda expression. We are going to understand its usage with lots of examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>M power N Using Recursive function</title>
      <link>https://codingnconcepts.com/java/m-power-n-using-recursive/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/m-power-n-using-recursive/</guid>
      <description>&lt;p&gt;This is one of the example of using recursive function in Java to find M power N&lt;/p&gt;</description>
    </item>
    <item>
      <title>Print All String Combinations Using Recursive function</title>
      <link>https://codingnconcepts.com/java/print-all-string-combinations-using-recursive/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/print-all-string-combinations-using-recursive/</guid>
      <description>&lt;p&gt;Print all the possible combinations of a given String using Recursive function in Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>Streams in Java 8</title>
      <link>https://codingnconcepts.com/java/streams-in-java-8/</link>
      <pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/streams-in-java-8/</guid>
      <description>&lt;p&gt;One of the major feature of Java 8 is addition of Stream. It also has introduced the functional programming in Java. We will discuss different stream operations available in Collection, Array, IntStream with examples. We will also discuss the difference between Intermediate and Terminal operations.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decorator Design Pattern Using Java</title>
      <link>https://codingnconcepts.com/java/decorator-design-pattern-using-java/</link>
      <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/decorator-design-pattern-using-java/</guid>
      <description>&lt;p&gt;Decorator design pattern is used to add a new feature on the existing object by wrapping it with a decorator class.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Core Java Interview Questions</title>
      <link>https://codingnconcepts.com/top-java-interview-questions/</link>
      <pubDate>Sat, 07 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/top-java-interview-questions/</guid>
      <description>&lt;p&gt;Comprehensive List of Java Interview Questions based on my personal interview experience over the last few years. Sequence of Questions in each section are in the order of recent interview trends. Keep following this post link for regular updates.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Singleton Design Pattern Using Java</title>
      <link>https://codingnconcepts.com/java/singleton-design-pattern-using-java/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/singleton-design-pattern-using-java/</guid>
      <description>&lt;p&gt;In this tutorial, We&amp;rsquo;ll learn how to create a Singleton Design Pattern using Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka Consumer Using Java</title>
      <link>https://codingnconcepts.com/post/apache-kafka-consumer-using-java/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/post/apache-kafka-consumer-using-java/</guid>
      <description>&lt;p&gt;Implementation of Kafka Consumer using Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kafka Producer Using Java</title>
      <link>https://codingnconcepts.com/post/apache-kafka-producer-using-java/</link>
      <pubDate>Sat, 11 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/post/apache-kafka-producer-using-java/</guid>
      <description>&lt;p&gt;Implementation of Kafka Producer using Java&lt;/p&gt;</description>
    </item>
    <item>
      <title>Immutable Class in Java</title>
      <link>https://codingnconcepts.com/java/immutable-class-using-java/</link>
      <pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/immutable-class-using-java/</guid>
      <description>&lt;p&gt;In this tutorial, we&amp;rsquo;ll learn about &lt;em&gt;Immutable Class&lt;/em&gt; and its benefits in thread-safety, caching and collections. We will also look at rules to create immutable classes and eventually we&amp;rsquo;ll write an &lt;em&gt;Immutable Class&lt;/em&gt; from scratch in Java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fibonacci Series Using Recursive function</title>
      <link>https://codingnconcepts.com/java/fibonacci-series-using-recursive/</link>
      <pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/fibonacci-series-using-recursive/</guid>
      <description>&lt;p&gt;Fibonacci series implementation in java is frequently asked question in interview at fresher level. Moreover, it is a very famous example to show how to use recursive function in java.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bubble Sort</title>
      <link>https://codingnconcepts.com/java/bubble-sort-using-java/</link>
      <pubDate>Tue, 09 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/bubble-sort-using-java/</guid>
      <description>&lt;h3 id=&#34;why-it-is-called-bubble-sort-&#34;&gt;Why it is called bubble sort ?&lt;/h3&gt;
&lt;p&gt;Bubble Sort is nothing but a comparison algorithm where -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;At the end of first iteration, largest element in the array get placed at last index&lt;/li&gt;
&lt;li&gt;At the end of second iteration, second largest element in the array get placed at second last index and so on&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This way large elements are moving towards the last indexes and hence small elements are moving towards the starting indexes which is also termed as smaller elements &amp;ldquo;bubble&amp;rdquo; to the top of the list that is why it is called bubble sort.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Design Elevator (Lift) in Java</title>
      <link>https://codingnconcepts.com/java/elevator-implementation-using-java/</link>
      <pubDate>Mon, 06 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>https://codingnconcepts.com/java/elevator-implementation-using-java/</guid>
      <description>&lt;p&gt;Implementation of Elevator or Lift has been asked in many interviews. I have tried to implement it using muti-threading and TreeSet. TreeSet is used to store incoming request. It is a good choice here as it removes the duplicate requests and implements NavigableSet which provide you methods such as floor and ceiling.&lt;/p&gt;
&lt;p&gt;Elevator in this program implements following features -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If elevator is going up or down, it checks for nearest floor request to process first in that direction.&lt;/li&gt;
&lt;li&gt;If there is no request to process, it waits at last processed floor.&lt;/li&gt;
&lt;li&gt;If a new request comes while elevator is processing a request. It process the new request first if it is nearest than the processing floor in same direction.&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>